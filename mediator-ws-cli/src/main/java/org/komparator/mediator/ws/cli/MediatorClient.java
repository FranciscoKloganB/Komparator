package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;

import javax.xml.ws.*;
import org.komparator.mediator.ws.*;
import org.komparator.security.handler.*;
import org.komparator.mediator.ws.domain.FrontEndConfigurator;
import org.komparator.security.domain.SecurityManager;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
import java.security.NoSuchAlgorithmException;


/**
* Client.
*
* Adds easier endpoint address configuration and
* UDDI lookup capability to the PortType generated by wsimport.
*/
public class MediatorClient extends FrontEndConfigurator implements MediatorPortType {
  MediatorService service = null;
  MediatorPortType port = null;
  private String uddiURL = null;
  private String wsName = null;
  private String wsURL = null;
  private String clientId = "";
  private boolean connectedToBackupMediator = false;
  private SecurityManager secM = SecurityManager.getInstance();
  private AtomicInteger requestNumber = new AtomicInteger(0);

  /** returns wsURL of the mediator with whom this client is connected */
  public String getWsURL() {
    return wsURL;
  }

  /** constructor with provided web service URL */
  public MediatorClient(String wsURL) throws MediatorClientException {
    this.wsURL = wsURL;
    createStub();
  }

  /** constructor with provided UDDI location and name */
  public MediatorClient(String uddiURL, String wsName) throws MediatorClientException, NoSuchAlgorithmException {
    this.uddiURL = uddiURL;
    this.wsName = wsName;
    this.clientId = secM.generateSecureNumber().concat("_");
    uddiLookup();
    createStub();
  }

  // remote invocation methods ----------------------------------------------

  @Override
  public void clear() {
    String requestId = generateRequestId();
    System.out.println("Requesting clear operation with request ID: " + requestId);
    relayIdToHandler(requestId);
    clearAux(requestId, FIRST_ATTEMPT);
  }

  private void clearAux(String requestId, int attempt) {
    if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
      clientRestart(requestId);
    } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
      clientRestart(requestId);
      clearAux(requestId, FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
      System.out.println("Secondary mediator server failed to respond. Could not clear.");
    } else {
      try {
        port.clear();
      } catch (WebServiceException wSE) {
        boolean timeout = socketTimeOut(wSE.getCause());
        if (timeout && !connectedToBackupMediator) {
          clearAux(requestId, ++attempt);
        } else if (timeout && connectedToBackupMediator) {
          clearAux(requestId, ++attempt);
        } else if (!timeout && !connectedToBackupMediator) {
          clientRestart(requestId);
          clearAux(requestId, FIRST_ATTEMPT);
        } else if (!timeout && connectedToBackupMediator) {
          System.out.println("Secondary mediator server isn't running. Could not clear.");
        }
      }
    }
  }

  @Override
  public String ping(String arg0) {
    return pingAux(arg0, FIRST_ATTEMPT);
  }

  private String pingAux(String arg0, int attempt) {
    if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
      clientRestart();
      return pingAux(arg0, FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
      clientRestart();
      return pingAux(arg0, FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
      System.out.println("Secondary mediator server timed out on ping.");
    } else {
      try {
        return port.ping(arg0);
      } catch (WebServiceException wSE) {
        boolean timeout = socketTimeOut(wSE.getCause());
        if (timeout && !connectedToBackupMediator) {
          return pingAux(arg0, ++attempt);
        } else if (timeout && connectedToBackupMediator) {
          return pingAux(arg0, ++attempt);
        } else if (!timeout && !connectedToBackupMediator) {
          clientRestart();
          return pingAux(arg0, FIRST_ATTEMPT);
        } else if (!timeout && connectedToBackupMediator) {
          System.out.println("Secondary mediator server isn't running. Ping failed.");
        }
      }
    }
    return "Neither mediator responded to ping.";
  }

  @Override
  public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
    return searchItemsAux(descText, FIRST_ATTEMPT);
  }

  private List<ItemView> searchItemsAux(String descText, int attempt)
    throws InvalidText_Exception {
      if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
        clientRestart();
        return searchItemsAux(descText, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
        clientRestart();
        return searchItemsAux(descText, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
        System.out.println("Secondary mediator server timed out. Could not search a list of items for the given query.");
      } else {
        try {
          return port.searchItems(descText);
        } catch (WebServiceException wSE) {
          boolean timeout = socketTimeOut(wSE.getCause());
          if (timeout && !connectedToBackupMediator) {
            return searchItemsAux(descText, ++attempt);
          } else if (timeout && connectedToBackupMediator) {
            return searchItemsAux(descText, ++attempt);
          } else if (!timeout && !connectedToBackupMediator) {
            System.out.println("Restarting client endpoint...");
            clientRestart();
            return searchItemsAux(descText, FIRST_ATTEMPT);
          } else if (!timeout && connectedToBackupMediator) {
            System.out.println("Secondary mediator server isn't running. Could not search a list of items for the given query.");
          }
        }
      }
      return new ArrayList<ItemView>();
    }

  @Override
  public List<CartView> listCarts() {
    return listCartsAux(FIRST_ATTEMPT);
  }

  private List<CartView> listCartsAux(int attempt) {
    if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
      clientRestart();
      return listCartsAux(FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
      clientRestart();
      return listCartsAux(FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
      System.out.println("Secondary mediator server failed to respond. Could retrieve carts currently listed on mediator.");
    } else {
      try {
        return port.listCarts();
      } catch (WebServiceException wSE) {
        boolean timeout = socketTimeOut(wSE.getCause());
        if (timeout && !connectedToBackupMediator) {
          return listCartsAux(++attempt);
        } else if (timeout && connectedToBackupMediator) {
          return listCartsAux(++attempt);
        } else if (!timeout && !connectedToBackupMediator) {
          clientRestart();
          return listCartsAux(FIRST_ATTEMPT);
        } else if (!timeout && connectedToBackupMediator) {
          System.out.println("Secondary mediator server isn't running. Could retrieve carts currently listed on mediator.");
        }
      }
    }
    return new ArrayList<CartView>();
  }

  @Override
  public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
    return getItemsAux(productId, FIRST_ATTEMPT);
  }

  private List<ItemView> getItemsAux(String productId, int attempt)
    throws InvalidItemId_Exception {
      if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
        clientRestart();
        return getItemsAux(productId, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
        clientRestart();
        return getItemsAux(productId, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
        System.out.println("Secondary mediator server timed out. Could not retrieve a list of items for the given query.");
      } else {
        try {
          return port.getItems(productId);
        } catch (WebServiceException wSE) {
          boolean timeout = socketTimeOut(wSE.getCause());
          if (timeout && !connectedToBackupMediator) {
            return getItemsAux(productId, ++attempt);
          } else if (timeout && connectedToBackupMediator) {
            return getItemsAux(productId, ++attempt);
          } else if (!timeout && !connectedToBackupMediator) {
            clientRestart();
            return getItemsAux(productId, FIRST_ATTEMPT);
          } else if (!timeout && connectedToBackupMediator) {
            System.out.println("Secondary mediator server isn't running. Could not retrieve a list of items for the given query.");
          }
        }
      }
      return new ArrayList<ItemView>();
    }

  @Override
  public ShoppingResultView buyCart(String cartId, String creditCardNr)
    throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
      String requestId = generateRequestId();
      System.out.println("Requesting buy cart operation with request ID: " + requestId);
      relayIdToHandler(requestId);
      return buyCartAux(cartId, creditCardNr, requestId, FIRST_ATTEMPT);
    }

  private ShoppingResultView buyCartAux(String cartId, String creditCardNr, String requestId, int attempt)
    throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
      if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
        clientRestart(requestId);
        return buyCartAux(cartId, creditCardNr, requestId, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
        clientRestart(requestId);
        return buyCartAux(cartId, creditCardNr, requestId, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
        System.out.println("Secondary mediator server failed to respond. Could not purchase cart.");
      } else {
        try {
          return port.buyCart(cartId, creditCardNr);
        } catch (WebServiceException wSE) {
          boolean timeout = socketTimeOut(wSE.getCause());
          if (timeout && !connectedToBackupMediator) {
            return buyCartAux(cartId, creditCardNr, requestId, ++attempt);
          } else if (timeout && connectedToBackupMediator) {
            return buyCartAux(cartId, creditCardNr, requestId, ++attempt);
          } else if (!timeout && !connectedToBackupMediator) {
            clientRestart(requestId);
            return buyCartAux(cartId, creditCardNr, requestId, FIRST_ATTEMPT);
          } else if (!timeout && connectedToBackupMediator) {
            System.out.println("Secondary mediator server isn't running. Could not purchase cart.");
          }
        }
      }
      return new ShoppingResultView();
    }

  @Override
  public void addToCart(String cartId, ItemIdView itemId, int itemQty)
    throws InvalidCartId_Exception, InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
      String requestId = generateRequestId();
      System.out.println("Requesting add to cart operation with request ID: " + requestId);
      relayIdToHandler(requestId);
      addToCartAux(cartId, itemId, itemQty, requestId, FIRST_ATTEMPT);
  }

  private void addToCartAux(String cartId, ItemIdView itemId, int itemQty, String requestId, int attempt)
    throws InvalidCartId_Exception, InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
      if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
        clientRestart(requestId);
        addToCartAux(cartId, itemId, itemQty, requestId, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
        clientRestart(requestId);
        addToCartAux(cartId, itemId, itemQty, requestId, FIRST_ATTEMPT);
      } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
        System.out.println("Secondary mediator server failed to respond. Could not add items to cart.");
      } else {
        try {
          port.addToCart(cartId, itemId, itemQty);
        } catch (WebServiceException wSE) {
          boolean timeout = socketTimeOut(wSE.getCause());
          if (timeout && !connectedToBackupMediator) {
            addToCartAux(cartId, itemId, itemQty, requestId, ++attempt);
          } else if (timeout && connectedToBackupMediator) {
            addToCartAux(cartId, itemId, itemQty, requestId, ++attempt);
          } else if (!timeout && !connectedToBackupMediator) {
            clientRestart(requestId);
            addToCartAux(cartId, itemId, itemQty, requestId, FIRST_ATTEMPT);
          } else if (!timeout && connectedToBackupMediator) {
            System.out.println("Secondary mediator server isn't running. Could not add items to cart.");
          }
        }
      }
    }

  @Override
  public List<ShoppingResultView> shopHistory() {
    return shopHistoryAux(FIRST_ATTEMPT);
  }

  private List<ShoppingResultView> shopHistoryAux(int attempt) {
    if (attempt > MAX_TIMEOUTS && PERSISTENT_PROPERTY) {
      clientRestart();
      return shopHistoryAux(FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && !connectedToBackupMediator) {
      clientRestart();
      return shopHistoryAux(FIRST_ATTEMPT);
    } else if (attempt > MAX_TIMEOUTS && connectedToBackupMediator) {
      System.out.println("Secondary mediator server failed to respond. Shop history retrieval failed.");
    } else {
      try {
        return port.shopHistory();
      } catch (WebServiceException wSE) {
        boolean timeout = socketTimeOut(wSE.getCause());
        if (timeout && !connectedToBackupMediator) {
          return shopHistoryAux(++attempt);
        } else if (timeout && connectedToBackupMediator) {
          return shopHistoryAux(++attempt);
        } else if (!timeout && !connectedToBackupMediator) {
          clientRestart();
          return shopHistoryAux(FIRST_ATTEMPT);
        } else if (!timeout && connectedToBackupMediator) {
          System.out.println("Secondary mediator server isn't running. Shop history retrieval failed.");
        }
      }
    }
    return new ArrayList<ShoppingResultView>();
  }

  // One way operations - these are meant to be called by Mediators only.
  /*--------------------------------------------------------------------------*/
  @Override
  // delegates exceptions to lifeproof object.
  public void imAlive() {
    port.imAlive();
  }

  @Override
  public void replicateClear(String requestId) {
    System.out.println("Asking backup mediator to replicate clear operation...");
    try {
      port.replicateClear(requestId);
    } catch (WebServiceException wSE) {
      System.out.println("Backup mediator server isn't running. Clear replication failed.");
    }
  }

  @Override
  public void replicateAddToCart(String cartId, ItemIdView itemId, int itemQty, String descText, int price, String requestId) {
    System.out.println("Asking backup mediator to replicate add to cart operation...");
    try {
      port.replicateAddToCart(cartId, itemId, itemQty, descText, price, requestId);
    } catch (WebServiceException wSE) {
      System.out.println("Backup mediator server isn't running. Add to cart replication failed.");
    }
  }

  @Override
  public void replicateBuyCart(ShoppingResultView shopResult, String requestId) {
    System.out.println("Asking backup mediator to replicate buy cart operation...");
    try {
      port.replicateBuyCart(shopResult, requestId);
    } catch (WebServiceException wSE) {
      System.out.println("Backup mediator server isn't running. Buy cart replication failed.");
    }
  }

  // Helper methods
  /*--------------------------------------------------------------------------*/

  /* Make a string that represents the request id to be passed to handler */
  private synchronized String generateRequestId() {
    int n = requestNumber.incrementAndGet();
    return new String(clientId + Integer.toString(n));
  }

  /** UDDI lookup */
	private void uddiLookup() throws MediatorClientException {
		System.out.println("");
		try {
			System.out.printf("Contacting UDDI at %s%n", uddiURL);
			UDDINaming uddiNaming = new UDDINaming(uddiURL);
			System.out.printf("Looking for '%s'%n", wsName);
			System.out.println("");
			wsURL = uddiNaming.lookup(wsName);
		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!", uddiURL);
			throw new MediatorClientException(msg, e);
		}
		if (wsURL == null) {
			String msg = String.format(
			"Service with name %s not found on UDDI at %s", wsName, uddiURL);
			throw new MediatorClientException(msg);
		}
	}

	/** Stub creation and configuration */
	private void createStub() {
		System.out.println("Creating stub ...");
		service = new MediatorService();
		port = service.getMediatorPort();
		secM.setEntityName("T64_Mediator");
		if (wsURL != null) {
			System.out.println("Setting endpoint address ...");
			System.out.println("");
			Map<String, Object> requestContext = getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
			requestContext.put(CCMediatorClientHandler.ENDPOINT_NAME, wsName);
			for (String propName : CONN_TIME_PROPS) {
				requestContext.put(propName, CONNECTION_TIMEOUT);
			} for (String propName : RECV_TIME_PROPS) {
				requestContext.put(propName, RECEIVE_TIMEOUT);
			}

		}
	}
	/** Tries to reconnect a client a few times, if it fails it throws a RuntimeException */
	private void clientRestart() {
		try {
			Thread.sleep(THREAD_NAP);
		} catch(InterruptedException iE) { }  // Ignore exception
		int attempt = 1;
		boolean unsuccessful = true;
		while (unsuccessful) {
			System.out.println("Reconnecting to a mediator... Attempt: " + attempt);
			try {
				uddiLookup();
				createStub();
        this.connectedToBackupMediator = true;
				System.out.println("Reconnection to mediator server was successful on attempt: " + attempt);
				unsuccessful = false;
			} catch (MediatorClientException mCE) {
				if (++attempt > MAX_RECONNECT_ATTEMPTS) {
					unsuccessful = false;
					System.out.println("Could not establish a connection to a mediator server after " + attempt + "...");
					System.out.println("");
					throw new RuntimeException("Could not establish a connection to a Mediator");
				} else {
						try {
							Thread.sleep(THREAD_WAIT);
						} catch(InterruptedException iE) { } // Ignore exception
					}
				}
		}
	}

	/** Restarts client and places request id on the message context of the new port */
	private void clientRestart(String requestId) {
		clientRestart();
		relayIdToHandler(requestId);
	}

  /** After obtaining handler context it will place the requestId on its map */
  private void relayIdToHandler(String requestId) {
    Map<String, Object> requestContext = getRequestContext();
    requestContext.put(RequestIdMediatorClientHandler.REQUEST_ID, requestId);
  }

  /** Helper method to obtain a context from the bindingProvider */
  private Map<String, Object> getRequestContext() {
    BindingProvider bindingProvider = (BindingProvider) port;
    return bindingProvider.getRequestContext();
  }

  private void connectedToBackupMediatorToggle() {
    if (this.connectedToBackupMediator == false) {
      this.connectedToBackupMediator = true;
    } else {
      this.connectedToBackupMediator = false;
    }
  }
}
