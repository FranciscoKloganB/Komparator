package org.komparator.supplier.ws.cli;

import java.util.List;
import java.util.Map;
import org.komparator.supplier.ws.*;
import javax.xml.ws.BindingProvider;
import org.komparator.security.handler.*;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINamingException;
import org.komparator.security.domain.SecurityManager;
import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client port wrapper.
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class SupplierClient implements SupplierPortType {

	/** WS service */
	SupplierService service = null;
	SupplierPortType port = null;	// (port type is the interface, port is the implementation)
	private UDDINaming uddiNaming = null;
	private String wsURL = null;	// WS endpoint address - default value is defined inside WSDL
	private String wsName = null;
	private String uddiURL = null;
	private boolean verbose = false;

	public String getWsURL() {
		return wsURL;
	}

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public SupplierClient(String wsURL) throws SupplierClientException, NullPointerException {
		if (wsURL == null) {
			throw new NullPointerException("wsURL can't be null!");
		}
		this.wsURL = wsURL;
		createStub();
	}

	/** constructor with provided web service URL, web service name and uddi address */
	public SupplierClient(String wsName, String uddiURL) throws SupplierClientException, NullPointerException {
		if (wsName == null || uddiURL == null) {
			throw new NullPointerException("wsName and uddiURL can't be null!");
		}
		this.wsName = wsName;
		this.uddiURL = uddiURL;
		try {
			uddiLookUp();
		} catch (UDDINamingException uNE) {
			throw new SupplierClientException("Could not create new SupplierClient Obj with service name " + wsName + "!");
		}
		createStub();
	}

	/** Locate webservice endpointAddress using wsName and uddiURL*/
	private void uddiLookUp() throws UDDINamingException {
		try {
			if (verbose) { System.out.printf("Contacting UDDI at %s%n", uddiURL); }
			this.uddiNaming = new UDDINaming(uddiURL);
			if (verbose) { System.out.printf("Looking for '%s'%n", wsName); }
			this.wsURL = uddiNaming.lookup(wsName);
			if (wsURL == null) {
				if (verbose) { System.out.println("Not found!"); }
				return;
			} else {
				if (verbose) { System.out.printf("Found %s%n", wsURL); }
			}
		} catch (UDDINamingException uNE) {
			if (verbose) { System.out.printf("Caught UDDINamingException while doing lookup() on uddiNamingObj!"); }
			throw uNE;
		}
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose) { System.out.println("Creating stub ..."); }
		service = new SupplierService();
		port = service.getSupplierPort();
		SecurityManager secM = SecurityManager.getInstance();
		secM.setEntityName("T64_Mediator");
		if (wsURL != null) {
			if (verbose) { System.out.println("Setting endpoint address ..."); }
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
			requestContext.put(MessageContextHandler.ENDPOINT_NAME, wsName);
			requestContext.put(FreshnessSupplierClientHandler.ENDPOINT_NAME, wsName);
			requestContext.put(SignatureSupplierClientHandler.ENDPOINT_NAME, wsName);
		}
	}

	// remote invocation methods ----------------------------------------------
	@Override
	public ProductView getProduct(String productId) throws BadProductId_Exception {
		return port.getProduct(productId);
	}

	@Override
	public List<ProductView> searchProducts(String descText) throws BadText_Exception {
		return port.searchProducts(descText);
	}

	@Override
	public String buyProduct(String productId, int quantity)
			throws BadProductId_Exception, BadQuantity_Exception, InsufficientQuantity_Exception {
		return port.buyProduct(productId, quantity);
	}

	@Override
	public String ping(String name) {
		return port.ping(name);
	}

	@Override
	public void clear() {
		port.clear();
	}

	@Override
	public void createProduct(ProductView productToCreate) throws BadProductId_Exception, BadProduct_Exception {
		port.createProduct(productToCreate);
	}

	@Override
	public List<ProductView> listProducts() {
		return port.listProducts();
	}

	@Override
	public List<PurchaseView> listPurchases() {
		return port.listPurchases();
	}

}
